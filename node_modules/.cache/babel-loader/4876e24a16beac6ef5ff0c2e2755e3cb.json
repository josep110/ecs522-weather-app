{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/esthersanchezsanchez/Documents/GitHub/ecs522-weather-app/src/pages/Today.js\";\nimport React from 'react';\nimport precipitation from \"./icons/rain.ico\";\nimport Todayweather from \"./Todayweather\";\nimport hazeIcon from \"./icons/haze.ico\";\nimport cloudIcon from \"./icons/cloud.ico\";\nimport stormIcon from \"./icons/storm.ico\";\nimport snowIcon from \"./icons/snow.ico\";\nimport sunIcon from \"./icons/sun.ico\";\nimport rainyIcon from \"./icons/rain.ico\";\n\nfunction get_WeatherIcon(rangeId) {\n  switch (true) {\n    case rangeId >= 200 && rangeId < 232:\n      return stormIcon;\n\n    case rangeId >= 300 && rangeId <= 321:\n      return rainyIcon;\n\n    case rangeId >= 500 && rangeId <= 521:\n      return rainyIcon;\n\n    case rangeId >= 600 && rangeId <= 622:\n      return snowIcon;\n\n    case rangeId >= 701 && rangeId <= 781:\n      return hazeIcon;\n\n    case rangeId === 800:\n      return sunIcon;\n\n    case rangeId >= 801 && rangeId <= 804:\n      return precipitation;\n\n    default:\n      return cloudIcon;\n      ;\n  }\n}\n\nclass Today extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      city: null,\n      temp: null,\n      lat: null,\n      lon: null,\n      wind: null,\n      description: null,\n      humidity: null,\n      rangeId: null,\n      units: \"metric\"\n    };\n\n    this.componentDidMount = () => {\n      fetch(`https://api.openweathermap.org/data/2.5/weather/?lat=${this.lat}&lon=${this.lon}&units=${this.state.units}&appid=c49b58637f116ba62e71ca04a520f9bb`).then(res => res.json()).then(result => {\n        console.log(\"cdata fetched by esther\", result);\n        this.setState({\n          city: result.name,\n          temp: result.main.temp,\n          wind: result.wind.speed,\n          description: result.weather[0].description,\n          humidity: result.main.humidity,\n          rangeId: result.weather[0].id\n        });\n      });\n    };\n  }\n\n  getLocation() {\n    navigator.geolocation.getCurrentPosition(position => {\n      this.setState({\n        lat: toString(position.coords.latitude),\n        lon: toString(position.coords.longitude)\n      });\n      console.log(\"latitude\", this.state.lat, \"longitude\", this.state.lon);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Todayweather, {\n      City: this.state.city,\n      temperature: this.state.temp,\n      Wind: this.state.wind,\n      Humidity: this.state.humidity,\n      Description: this.state.description,\n      Icon: get_WeatherIcon(this.state.rangeId)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 19\n    }, this);\n  }\n\n}\n\nexport default Today;","map":{"version":3,"sources":["/Users/esthersanchezsanchez/Documents/GitHub/ecs522-weather-app/src/pages/Today.js"],"names":["React","precipitation","Todayweather","hazeIcon","cloudIcon","stormIcon","snowIcon","sunIcon","rainyIcon","get_WeatherIcon","rangeId","Today","Component","state","city","temp","lat","lon","wind","description","humidity","units","componentDidMount","fetch","then","res","json","result","console","log","setState","name","main","speed","weather","id","getLocation","navigator","geolocation","getCurrentPosition","position","toString","coords","latitude","longitude","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport precipitation from \"./icons/rain.ico\";\nimport Todayweather from \"./Todayweather\";\nimport hazeIcon from \"./icons/haze.ico\";\nimport cloudIcon from \"./icons/cloud.ico\"\nimport stormIcon from \"./icons/storm.ico\";\nimport snowIcon from \"./icons/snow.ico\";\nimport sunIcon from \"./icons/sun.ico\";\nimport rainyIcon from\"./icons/rain.ico\";\n\n\n\n\n\nfunction get_WeatherIcon(rangeId) {\n      switch (true) {\n        case rangeId >= 200 && rangeId < 232:\n          return(stormIcon);\n        case rangeId >= 300 && rangeId <= 321:\n          return(rainyIcon);\n        case rangeId >= 500 && rangeId <= 521:\n          return(rainyIcon);\n        case rangeId >= 600 && rangeId <= 622:\n          return(snowIcon);\n        case rangeId >= 701 && rangeId <= 781:\n          return(hazeIcon);\n        case rangeId === 800:\n          return(sunIcon);\n        case rangeId >= 801 && rangeId <= 804:\n          return(precipitation);\n        default:\n          return(cloudIcon);;\n      }\n    }\n\n\n\nclass Today extends React.Component{\n      state = {\n            city: null,\n            temp:null,\n            lat:null,\n            lon:null,\n            wind:null,\n          description:null,\n          humidity:null,\n          rangeId:null,\n          units:\"metric\",\n          }\n\n          getLocation(){\n    \n          navigator.geolocation.getCurrentPosition(position =>{\n            this.setState({\n                  lat:toString(position.coords.latitude),\n                  lon:toString(position.coords.longitude),\n            })\n            console.log(\"latitude\",this.state.lat , \"longitude\", this.state.lon)\n      })\n          }\n\n          componentDidMount =()=>{\n\n             fetch(`https://api.openweathermap.org/data/2.5/weather/?lat=${this.lat}&lon=${this.lon}&units=${this.state.units}&appid=c49b58637f116ba62e71ca04a520f9bb`)\n            \n            .then(res => res.json())\n          .then(result => {\n            console.log(\"cdata fetched by esther\",result);\n            this.setState({\n                  city:result.name,\n                  temp:result.main.temp,\n                  wind:result.wind.speed,\n                  description:result.weather[0].description,\n                  humidity:result.main.humidity,\n                  rangeId:result.weather[0].id,\n                  \n            })\n          });\n          }\n\n\n          render(){\n \n            return (\n                  <Todayweather City={this.state.city} temperature={this.state.temp} Wind={this.state.wind} Humidity={this.state.humidity} Description={this.state.description}     Icon={get_WeatherIcon(this.state.rangeId)}/>\n\n            )}\n}\n\nexport default Today;"]},"metadata":{},"sourceType":"module"}